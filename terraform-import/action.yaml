name: 'Terraform Import'
description: 'Runs terraform import using resource id and resource name.'
inputs:
  resource_id:
    description: "[resource_id] (i.e. 45188095) ID of the TF Resource being imported."
    required: true
  resource_name:
    description: "[resource_name] (i.e. datadog_monitor.platform-browser-identity-status). Type and name of the resource that will be in your TF File in dot notation."
    required: true
  dry_run:
    description: "[dry_run] (y/n). If you wish to skip updating the TF State File."
    required: true
    default: "y"

runs:
  using: "composite"
  steps:
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ env.GH_ACTIONS_SSH_PRIVATE_KEY }}
    - name: Pull
      uses: actions/checkout@v2
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    - name: Initialize Terraform
      run: |
        terraform version
        terraform init -lock=false -input=false
      shell: bash
    - name: Dry Run
      if: ${{ inputs.dry_run == 'y' }}
      run: |
        RED='\033[0;31m'
        NC='\033[0m'
        printf "${RED}Below are the list of commands that will run:${NC}\n"
        printf "%s" "terraform version"
        printf "%s" "terraform init -lock=false -input=false"
        printf "%s" "terraform import -input=false ${{ inputs.resource_name }} ${{ inputs.resource_id }}"
        printf "%s" "terraform show"
        printf "\n\n${RED}Please make sure to do the following when doing the actual import:${NC}"
        printf "\n${RED}1.${NC} Before running the import make sure you enter an empty resource in a .tf file in your root (resource \"github_repository\" \"this-is-an-example\" {})."
        printf "\n${RED}2.${NC} After the import runs successfully, search for your resource in the ${RED}Console Output${NC} and copy all of the attributes."
        printf "\n${RED}3.${NC} Copy/paste the attributes into the empty resource you created."
        printf "\n${RED}4.${NC} Comment out all but the required attributes and trigger another plan."
        printf "\n${RED}5.${NC} Uncomment any attributes that ${RED}show a diff with the state file${NC} or you feel should be controlled via the configuration file."
        printf "\n${RED}6.${NC} Once the terraform plan runs with no changes to infrastructure for the imported resource, remove the code comments and merge your changes."
      shell: bash
    - name: Update Terraform State File - If dry_run == 'n'
      if: ${{ inputs.dry_run == 'n' }}
      run: |
        terraform import -input=false ${{ inputs.resource_name }} ${{ inputs.resource_id }}
      shell: bash
    - name: Show Terraform State File - Find resource that was imported
      if: ${{ inputs.dry_run == 'n' }}
      run: |
        terraform show
      shell: bash
        
