name: 'Terraform Plan - Multiple Workspaces'
description: 'Runs a terraform plan for a for a repo with a multiple workspaces (i.e. most terminus repos).'
inputs:
  ssh_key:
    description: '[secret] GitHub SSH Key for pulling repo.'
    required: true
  terraform_version:
    description: '[decimal] (i.e. 1.0.11) Terraform version to use.'
    required: true
  tf_workspace:
    description: '[string] (i.e. ninja/prod-east) TF Workspace to create if initial_run input = true.'
    required: true
  artifactory_enabled:
    description: '[bool] (i.e. true/false) Whether or not the repo uses artifactory for the helm chart.'
    default: 'false'
    required: false
  artifactory_read_access_token:
    description: '[secret] Read access token for artifactory.'
    required: false
  artifactory_helm_chart_path:
    description: '[string] Path to helm chart for artifactory.'
    required: false
  github_token:
    description: '[secret] Github token for plan commenter to use.'
    required: true
  enable_plan_commenter:
    description: '[bool] (i.e. true/false) Enable the tf plan commenter.'
    required: false
    default: 'true'
  initial_run:
    description: '[bool] (i.e. true/false) If set to true, workspace will be
                  created based on tf_workspace input variable. This should only be run when
                  creating the repo and running the plan for the first time and
                  removed after.'
    required: false
    default: 'false'
    
runs:
  using: "composite"
  steps:
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ inputs.ssh_key }}
    - name: Pull
      uses: actions/checkout@v2
      with:
        lfs: true
    - name: Helm Update
      if: ${{ inputs.artifactory_enabled == 'true' }}
      run: |
        helm repo add terminus https://getterminus.jfrog.io/artifactory/default-helm/ --username developer --password ${{ inputs.artifactory_read_access_token }}
        helm repo update
        helm dependency update ${{ inputs.artifactory_helm_chart_path }}
      shell: bash
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ inputs.terraform_version }}
    - name: Terraform Format Check
      id: fmt
      run: |
        terraform fmt -check -recursive || echo "::set-output name=exitcode_continue_on_error::$?" 
      #TODO: Uncomment once github supports it
      #continue-on-error: true
      shell: bash
    - name: Post TF Format Check
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: GetTerminus/terraform-pr-commenter@use-intermediate-file
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
    - name: TF Plan - Initialize
      id: init
      run: |
        terraform version
        terraform init -lock=false -input=false
      shell: bash
    - name: Post TF Init Comment
      # TODO: Add in the below code to all plan commenter if statements when github adds in the functionality
      # (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: GetTerminus/terraform-pr-commenter@use-intermediate-file
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}
    - name: TF Plan - Select Workspace
      if: ${{ inputs.initial_run != 'true' }}
      run: |
        terraform workspace select ${{ inputs.tf_workspace }}
      shell: bash
    - name: TF Plan - Create Workspace
      if: ${{ inputs.initial_run == 'true' }}
      run: |
        terraform workspace new ${{ inputs.tf_workspace }}
        terraform workspace select ${{ inputs.tf_workspace }}
      shell: bash
    - name: TF Plan - Validate
      id: validate
      run: |
        terraform validate
        terraform workspace show
      shell: bash
    - name: Post TF Validate Comment
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: GetTerminus/terraform-pr-commenter@use-intermediate-file
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode }}
    - name: TF Plan - Run
      id: plan
      run: |
        terraform plan -var-file=vars/${{ inputs.tf_workspace }}.tfvars -lock=false -input=false -out=tfplan
      shell: bash
    - name: TF Plan - Show
      id: show_plan
      run: |
        terraform show tfplan
      shell: bash
    - name: Post TF Plan Comment
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && inputs.enable_plan_commenter == 'true' }}
      uses: GetTerminus/terraform-pr-commenter@use-intermediate-file
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        EXPAND_SUMMARY_DETAILS: "false"
        TF_WORKSPACE: ${{ inputs.tf_workspace }}
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.show_plan.outputs.stdout, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
        
