name: 'Terraform Apply - Multiple Workspaces'
description: 'Runs a terraform apply for a repo with a multiple workspaces (i.e. most terminus repos).'
inputs:
  ssh_key:
    description: '[secret] GitHub SSH Key for pulling repo.'
    required: true
  terraform_version:
    description: '[decimal] (i.e. 1.0.11) Terraform version to use.'
    required: true
  artifactory_enabled:
    description: '[bool] (i.e. true/false) Whether or not the repo uses artifactory for the helm chart.'
    default: 'false'
    required: false
  artifactory_read_access_token:
    description: '[secret] Read access token for artifactory.'
    required: false
  artifactory_helm_chart_path:
    description: '[string] Path to helm chart for artifactory.'
    required: false

runs:
  using: "composite"
  steps:
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ inputs.ssh_key }}
    - name: Install Datadog CI
      run: |
        yarn global add @datadog/datadog-ci
      shell: bash
    - name: Pull
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.deployment.ref }}
    - name: Upload Git MetaData to Datadog
      run: |
        if [ -z "${DATADOG_API_KEY}" ] && [ ! -z ${TF_VAR_eks_datadog_api_key} ]
        then
          echo "DATADOG_API_KEY empty setting to TF_VAR_eks_datadog_api_key"
          export DATADOG_API_KEY=${TF_VAR_eks_datadog_api_key}
        fi
        if [ -z "${DATADOG_API_KEY}" ] && [ -z ${TF_VAR_eks_datadog_api_key} ]
        then
          echo -e "\033[33mDATADOG_API_KEY and TF_VAR_eks_datadog_api_key are EMPTY one is required to run datadog-ci git-metadata upload. Skipping ...\033[0m"
        fi
        if [ ! -z "${DATADOG_API_KEY}" ]
        then
          datadog-ci git-metadata upload
        fi
      shell: bash
    - name: Deployment Pending
      uses: deliverybot/deployment-status@v1
      with:
        state: pending
        token: ${{ github.token }}
    - name: Helm Update
      if: ${{ inputs.artifactory_enabled == 'true' }}
      run: |
        helm repo add terminus https://getterminus.jfrog.io/artifactory/default-helm/ --username developer --password ${{ inputs.artifactory_read_access_token }}
        helm repo update
        helm dependency update ${{ inputs.artifactory_helm_chart_path }}
      shell: bash
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ inputs.terraform_version }}
    - name: TF Apply
      run: |
        terraform version
        terraform init -lock=false -input=false
        terraform validate
        terraform workspace show
        terraform plan -var-file=vars/$TF_WORKSPACE.tfvars -lock=true -lock-timeout=0s -input=false -out=tfplan .
        terraform apply -lock=true -lock-timeout=0s -input=false tfplan
      shell: bash
    - name: Deployment Success
      if: success()
      uses: deliverybot/deployment-status@v1
      with:
        state: success
        token: ${{ github.token }}
    - name: Deployment Failure
      if: failure()
      uses: deliverybot/deployment-status@v1
      with:
        state: failure
        token: ${{ github.token }}
      