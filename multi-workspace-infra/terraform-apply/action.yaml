name: 'Terraform Apply - Multiple Workspaces'
description: 'Runs a terraform apply for a repo with a multiple workspaces (i.e. most terminus repos).'
inputs:
  artifactory-enabled:
    description: 'Whether or not the repo uses artifactory for the helm chart.'
    default: 'false'
    required: false

runs:
  using: "composite"
  steps:
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ env.GH_ACTIONS_SSH_PRIVATE_KEY }}
    - name: Install Datadog CI
      run: |
        yarn global add @datadog/datadog-ci
      shell: bash
    - name: Pull
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.deployment.ref }}
    - name: Upload Git MetaData to Datadog
      run: |
        datadog-ci git-metadata upload
      shell: bash
    - name: Deployment Pending
      uses: deliverybot/deployment-status@v1
      with:
        state: pending
        token: ${{ github.token }}
    - name: Helm Update
      if: ${{ inputs.artifactory-enabled }} == 'true'
      run: |
        helm repo add terminus https://getterminus.jfrog.io/artifactory/default-helm/ --username developer --password $ARTIFACTORY_READONLY_ACCESS_TOKEN
        helm repo update
        helm dependency update $CHART_PATH
      shell: bash
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    - name: TF Apply
      run: |
        terraform version
        terraform init -lock=false -input=false
        terraform validate
        terraform workspace show
        terraform plan -var-file=vars/$TF_WORKSPACE.tfvars -lock=true -lock-timeout=0s -input=false -out=tfplan .
        terraform apply -lock=true -lock-timeout=0s -input=false tfplan
      shell: bash
    - name: Deployment Success
      if: success()
      uses: deliverybot/deployment-status@v1
      with:
        state: success
        token: ${{ github.token }}
    - name: Deployment Failure
      if: failure()
      uses: deliverybot/deployment-status@v1
      with:
        state: failure
        token: ${{ github.token }}
      