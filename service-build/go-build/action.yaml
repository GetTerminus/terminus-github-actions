name: 'Go Build'
description: 'Runs a GO build.'
inputs:
  ssh_key:
    description: '[secret] GitHub SSH Key for pulling repo.'
    required: true
  ecr_pusher_access_key_id:
    description: '[secret] AWS ECR Access Key ID.'
    required: true
  ecr_pusher_access_key:
    description: '[secret] AWS ECR Access Key.'
    required: true
  dockerhub_username:
    description: '[secret] DockerHub Username.'
    required: true
  dockerhub_token:
    description: '[secret] DockerHub Username.'
    required: true
  target_directory:
    description: '[string] Target directory for build commands.'
    required: true

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      env:
        SSH_KEY: ${{ inputs.ssh_key }}
      run: |
        cd ${{ github.action_path }}
        source ../../shell-scripts/input-validator.sh

        declare -A inputs
        inputs[ssh_key]="$SSH_KEY"

        validateInput inputs
      shell: bash
#    - name: Set Environmental Variables
#      run: |
#        echo "GOPRIVATE=github.com/GetTerminus/*" >> $GITHUB_ENV
#        echo "GOFLAGS=-mod=vendor" >> $GITHUB_ENV
#        echo "CGO_ENABLED=0" >> $GITHUB_ENV
#        echo "GOOS=linux" >> $GITHUB_ENV
#        echo "GOARCH=amd64" >> $GITHUB_ENV
#      shell: bash
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ inputs.ssh_key }}
    - name: Pull
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.ecr_pusher_access_key_id }}
        aws-secret-access-key: ${{ inputs.ecr_pusher_access_key }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_token }}
    - name: Build & Push cmd/${{ inputs.target_directory }}
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tray-io-integration-service
        SHA: ${{ github.sha }}
        TARGET_COMMAND: ${{ inputs.target_directory }}
      run: |
        DOCKERFILE=cmd/$TARGET_COMMAND/Dockerfile
        if [[ -f $DOCKERFILE ]];then
          IMAGE_TAG=$TARGET_COMMAND-$SHA
          echo "Building cmd/$TARGET_COMMAND with $DOCKERFILE and pushing to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build --build-arg goproxy=$GOPROXY --build-arg target_directory=./cmd/$TARGET_COMMAND/ -f $DOCKERFILE -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        else
          echo "Unable to build cmd/$TARGET_COMMAND no Dockerfile found, expecting it at $DOCKERFILE"
        fi
      shell: bash
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
      shell: bash
