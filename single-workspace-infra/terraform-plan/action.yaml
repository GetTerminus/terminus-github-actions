name: 'Terraform Plan - Single Workspace'
description: 'Runs a terraform plan for a repo with a single workspace (i.e. soylent-green, discworld).'
inputs:
  terraform-version:
    description: 'Version of terraform to use.'
    required: true
  github-token:
    description: 'Github token for plan commenter to use.'
    required: true
  enable-plan-commenter:
    description: 'Enable the tf plan commenter.'
    required: false
    default: 'true'
  initial-run:
    description: 'If set to true, workspace will be created based on TF_WORKSPACE.
                  This should only be run when creating the repo and running
                  the plan for the first time and removed after.'
    required: false
    default: 'false'
runs:
  using: "composite"
  steps:
    - name: Install SSH Key
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ env.GH_ACTIONS_SSH_PRIVATE_KEY }}
    - name: Pull
      uses: actions/checkout@v2
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive || echo "::set-output name=exitcode_continue_on_error::$?" 
      #TODO: Uncomment once github supports it
      #continue-on-error: true
      shell: bash
    - name: Post TF Format Comment
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: robburger/terraform-pr-commenter@v1.5.0
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: fmt
        commenter_input: ${{ format('{0}{1}', steps.fmt.outputs.stdout, steps.fmt.outputs.stderr) }}
        commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}
    - name: TF Plan - Initialize
      id: init
      run: |
        terraform version
        terraform init -lock=false -input=false
      shell: bash
    - name: Post TF Init Comment
      # TODO: Add in the below code to all plan commenter if statements when github adds in the functionality
      # (steps.init.outcome == 'success' || steps.init.outcome == 'failure')
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: robburger/terraform-pr-commenter@v1.5.0
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: init
        commenter_input: ${{ format('{0}{1}', steps.init.outputs.stdout, steps.init.outputs.stderr) }}
        commenter_exitcode: ${{ steps.init.outputs.exitcode }}
    - name: TF Plan - Create Workspace
      if: ${{ inputs.initial-run == 'true' }}
      run: |
        terraform workspace new ${{ env.TF_WORKSPACE }}
        terraform workspace select ${{ env.TF_WORKSPACE }}
      shell: bash
    - name: TF Plan - Validate
      id: validate
      run: |
        terraform validate
        terraform workspace show
      shell: bash
    - name: Post TF Validate Comment
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) }}
      uses: robburger/terraform-pr-commenter@v1.5.0
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: validate
        commenter_input: ${{ format('{0}{1}', steps.validate.outputs.stdout, steps.validate.outputs.stderr) }}
        commenter_exitcode: ${{ steps.validate.outputs.exitcode }}
    - name: TF Plan - Run
      id: plan
      run: |
        terraform plan -lock=false -input=false -out=tfplan
      shell: bash
    - name: TF Plan - Show
      id: show_plan
      run: |
        terraform show tfplan
      shell: bash
    - name: Clean Plan
      id: show_plan_clean
      run: |
        CLEAN_PLAN=$(echo "${{ steps.show_plan.outputs.stdout }}" | sed -r '/^(An execution plan has been generated and is shown below.|Terraform used the selected providers to generate the following execution|No changes. Infrastructure is up-to-date.|No changes. Your infrastructure matches the configuration.)$/,$!d')
        CLEAN_PLAN="${CLEAN_PLAN//'%'/'%25'}"
        CLEAN_PLAN="${CLEAN_PLAN//$'\n'/'%0A'}"
        CLEAN_PLAN="${CLEAN_PLAN//$'\r'/'%0D'}"
        echo "::set-output name=clean_plan::$(echo "$CLEAN_PLAN")"
      shell: bash
    - name: Test
      id: test
      run: |
        echo "find this line"
        echo "${{ steps.show_plan.outputs.stdout }}"
      shell: bash
    - name: Post TF Plan Comment
      if: ${{ always() && github.ref != format('refs/heads/{0}', github.event.repository.default_branch) && inputs.enable-plan-commenter == 'true' }}
      uses: robburger/terraform-pr-commenter@v1.5.0
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        EXPAND_SUMMARY_DETAILS: "false"
      with:
        commenter_type: plan
        commenter_input: ${{ format('{0}{1}', steps.show_plan_clean.outputs.clean_plan, steps.plan.outputs.stderr) }}
        commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
        
